/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint. 
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/
module.exports = {
    "env": {
        "browser": true,
        "node": true,
        "es6": true
    },
    "extends": [
        "airbnb-base-typescript",
        "eslint:recommended",
        "plugin:prettier/recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
    ],
    "ignorePatterns": ['.eslintrc.js'],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "project": "./tsconfig.eslint.json",
        "sourceType": "module"
    },
    "plugins": [
        "@typescript-eslint/eslint-plugin",
        "import"
    ],
    "rules": {
        "id-blacklist": "error",
        "id-match": "error",

        // Too restrictive, writing ugly code to defend against a very unlikely scenario: https://eslint.org/docs/rules/no-prototype-builtins
        "no-prototype-builtins": "off",
        "no-underscore-dangle": [ "error", { allowAfterThis: true } ],
        // Allow function hoisting to improve code readability
        "no-use-before-define": [
            "error",
            { functions: false, classes: true, variables: true },
        ],

        // It's not accurate in the monorepo style
        "import/no-extraneous-dependencies": "off",
        // https://basarat.gitbooks.io/typescript/docs/tips/defaultIsBad.html
        "import/prefer-default-export": "off",

        "brace-style": "off",
        "@typescript-eslint/brace-style": [ "error", "1tbs", { "allowSingleLine": true } ],
        "@typescript-eslint/indent": [
            "error",
            3,
            {
                "CallExpression": {
                    "arguments": "first"
                },
                "FunctionDeclaration": {
                    "parameters": "first"
                },
                "FunctionExpression": {
                    "parameters": "first"
                },
                "SwitchCase": 1
            }
        ],
        // Allow most functions to rely on type inference. If the function is exported, then `@typescript-eslint/explicit-module-boundary-types` will ensure it's typed.
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "@typescript-eslint/interface-name-prefix": "off",
        "@typescript-eslint/naming-convention": "error",
        // Allow function hoisting to improve code readability
        "@typescript-eslint/no-use-before-define": [
            "error",
            { functions: false, classes: true, variables: true, typedefs: true },
        ],
        "quotes": "off",
        "@typescript-eslint/quotes": [
            "error",
            "single",
            {
                "avoidEscape": true,
                "allowTemplateLiterals": true
            }
        ]
    }
    // overrides: [
    //     {
    //         files: ["*.ts"],
    //         rules: {
    //             "quotes": "off",
    //             "@typescript-eslint/quotes": [
    //                 "error",
    //                 "single",
    //                 {
    //                     "avoidEscape": true,
    //                     "allowTemplateLiterals": true
    //                 }
    //             ],
    //         }
    //     }
    // ]
            // Allow `require()`
            // "@typescript-eslint/no-var-requires": "off",
        // },
    // },
    // ],
};
